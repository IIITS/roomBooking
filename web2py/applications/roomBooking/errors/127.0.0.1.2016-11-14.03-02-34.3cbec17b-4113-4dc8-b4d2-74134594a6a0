(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> int() argument must be a string or a number, not 'dict'"
p3
sS'layer'
p4
S'/home/theprototype/Study_Material/web2py/applications/roomBooking/controllers/default.py'
p5
sS'code'
p6
S'import time\nimport datetime\n\n\n\n\ndef room():\n   \n    #from datetime import datetime , date\n    r=[]\n    r1=[]\n    rows = db(db.room_data).select()\n    arg = request.args(0)\n    i=0;\n    form=SQLFORM.factory(Field(\'enter_date\',\'datetime\',requires=IS_NOT_EMPTY()))\n    \n    #if form.process().accepted:\n            \n    rows1=db(db.events1.room_no==arg).select(orderby=db.events1.starts1)\n    #print rows1\n    if form.process().accepted:\n        for row in rows1:\n            #print row.starts1.date() , request.now.date()\n            x= datetime.datetime.strptime(form.vars.enter_date,"%Y-%m-%d %H:%M:%S");\n            print \'!!!!!\'\n            print x.date()\n            print row.starts1.date()\n            if(row.starts1.date() == x.date()):\n                r1.append(row)\n        \n        \n    else:\n        \n        for row in rows1:\n            #print row.starts1.date() , request.now.date()\n            if(row.starts1.date() == request.now.date()):\n                r1.append(row)\n    \n    for row in rows:\n        #print arg , row.room_no\n        if (arg==row.room_no):\n            r.append(row)\n    #print "###########3"\n    #print r1\n    return dict(rows=r,rows1=r1,form=form   )\n\ndef Book():\n    date = request.args[0]\n    bookId = request.args[1]\n    if len(db(db.dict.dictKey==date).select())>0:\n        ls = (db(db.dict.dictKey==date).select(db.dict.dictValue).as_list())\n        print ls\n        ls.append(bookId)\n        db(db.dict.update_or_insert(dictKey = date,dictValue = ls))\n    else :\n        db(db.dict.update_or_insert(dictKey = date,dictValue = [bookId]))\n    print len(db(db.dict.dictKey==date).select())\n    #db(db.dict.update_or_insert(dictKey = date,dictValue = [1,2]))\n    return locals()\n\ndef date():\n    print request.args[0]\n    date = request.args[0]\n    return locals()\n\n\ndef edit_room():\n    grid = SQLFORM.grid(db.room_data)\n    return locals()\n\ndef edit_events():\n    #import time\n    #import datetime\n    #from datetime import datetime,date\n    grid = SQLFORM.grid(db.events1)\n    return locals()\ndef confirm():\n    a=request.args(0)\n    b=request.args(1)\n    c=request.args(2)\n    d=request.args(3)\n    e=request.args(4)\n    f=request.args(5)\n    g=request.args(6)\n    h=request.args(7)\n    i=request.args(8)\n    j=request.args(9)\n    \n    return dict(room=a,start=b,end=c,subject=d,e=e,f=f,g=g,h=h,i=i,j=j  );\n\ndef roomprefer():\n    form=SQLFORM.factory(Field(\'start\',\'datetime\',requires=IS_NOT_EMPTY()),\n                    Field(\'end\',\'datetime\',requires = IS_NOT_EMPTY()),\n                    Field(\'subject\',\'string\',requires = IS_NOT_EMPTY()),)\n    return locals()\n\n\n\ndef index():\n    rows = db(db.room_data).select()\n\n    return locals();\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission|(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n\n    auth.settings.login_onvalidation = []\n    return dict(form=auth())\n\n@auth.requires_login()\ndef userpreference():\n    rows2=[];\n    import time;\n    import datetime;\n    m=datetime.datetime.today()\n    form=SQLFORM.factory(Field(\'Room_number\',\'string\',requires = IS_IN_DB( db, \'room_data.room_no\' )),\n                    Field(\'From\',\'datetime\',requires = IS_DATETIME_IN_RANGE(m)),\n                    Field(\'to\',\'datetime\',requires = IS_DATETIME_IN_RANGE(m)),\n                    Field(\'subject\',\'string\',requires = IS_NOT_EMPTY()),\n                    Field(\'seats_required\',\'integer\',requires = IS_NOT_EMPTY()))\n    if(request.args(0)==\'0\'):\n        \n        form.vars.Room_number = \'room_1\'\n    else:\n        a=request.args(1)\n        args=request.args(0)\n        form.vars.seats_required=a\n        form.vars.Room_number = args\n    if form.process().accepted:\n        if form.vars.to < form.vars.From :\n            #raise error_message\n            #form.vars.to.error_message="errors"\n            response.flash=\'Oops! You have entered an invalid date\'\n        else:\n            rows = db(db.events1.room_no==form.vars.Room_number).select()\n\n            flag=True;\n            for row in rows:\n                #print row.starts1;\n                #print form.vars.from1;\n                #print type(row.starts1);\n                x= datetime.datetime.strptime(str(form.vars.From),"%Y-%m-%d %H:%M:%S");\n                #print x;\n                y= datetime.datetime.strptime(str(form.vars.to),"%Y-%m-%d %H:%M:%S");\n                print type(x);\n           \n                if  (  (  (x >row.starts1 and x< row.stops1)or(y>row.starts1 and y < row.stops1)) or ( (x <row.starts1 and x< row.stops1)and (y>row.starts1 and y > row.stops1))  ):\n                    flag=False\n        \n            redirect(URL(\'best_results\', vars=dict( a=form.vars.Room_number, b = form.vars.From , c= form.vars.to, d = form.vars.seats_required ,flag1=flag,subject=form.vars.subject  )  ))\n        \n    return locals();\n\n\n\ndef best_results():\n    rows2=[];\n    xx=[];\n    vars = request.get_vars\n    import time;\n    import datetime;\n    print vars.flag1,"000000"\n    x= datetime.datetime.strptime(vars.b,"%Y-%m-%d %H:%M:%S");\n            #print x;\n    y= datetime.datetime.strptime(vars.c,"%Y-%m-%d %H:%M:%S");\n    \n    rows1= db(vars.d <= db.room_data.seats and db.room_data.room_no!=vars.a ).select()\n    rows3= db(db.events1.id>0 and db.events1.room_no!=vars.a).select()\n    i=0;\n    xx = db(db.room_data.room_no==vars.a).select()\n    if(vars.flag1=="True"):\n        rows2.append(xx[0])\n      \n    \n    \n    for k in rows1:\n        print k.room_no\n        flag1=True\n        for row in rows3:\n            \n            if  ( (row.room_no == k.room_no) and  ((  (x >row.starts1 and x< row.stops1)or(y>row.starts1 and y < row.stops1)) or ( (x                                 <row.starts1 and x< row.stops1)and (y>row.starts1 and y > row.stops1)))):\n                flag1=False;\n                break\n                    #rows2.append( db(db.events1.id == row.id).select())\n        if flag1==True:\n            rows2.append(k);\n    print rows2;\n    return dict(result=rows2,start_time = vars.b,stop_time= vars.c,subject=vars.subject,a=vars.a,b=vars.b,c=vars.c,d=vars.d,flag1=vars.flag1,sub=vars.subject);\n\ndef room_results():\n    rows2=[];\n    xx=[];\n#   vars = request.get_vars\n    import time;\n    import datetime;\n    e=request.args(0)\n    f=request.args(1)\n    g=request.args(2)\n    h=request.args(3)\n    i=request.args(4)\n    j=request.args(5)\n    \n    f=f.replace("_"," ",1)\n    f=f.replace("_",":")\n    g=g.replace("_"," ",1)\n    g=g.replace("_",":")\n    \n#   print vars.flag1,"000000"\n    x= datetime.datetime.strptime(f,"%Y-%m-%d %H:%M:%S");\n            #print x;\n    y= datetime.datetime.strptime(g,"%Y-%m-%d %H:%M:%S");\n    \n    rows1= db(h <= db.room_data.seats and db.room_data.room_no!=e ).select()\n    rows3= db(db.events1.id>0 and db.events1.room_no!=e).select()\n    \n    xx = db(db.room_data.room_no==e).select()\n    if(i=="True"):\n        rows2.append(xx[0])\n      \n    \n    \n    for k in rows1:\n        print k.room_no\n        flag1=True\n        for row in rows3:\n            \n            if  ( (row.room_no == k.room_no) and  ((  (x >row.starts1 and x< row.stops1)or(y>row.starts1 and y < row.stops1)) or ( (x<row.starts1 and x< row.stops1)and (y>row.starts1 and y > row.stops1)))):\n                flag1=False;\n                break\n                    #rows2.append( db(db.events1.id == row.id).select())\n        if flag1==True:\n            rows2.append(k);\n    print rows2;\n    return dict(result=rows2,start_time =f,stop_time= g,subject=j,a=e,b=f,c=g,d=h,flag1=i,sub=j);\n\n\ndef show():\n    \n    a =request.args(0, cast=int )\n    b = request.args(1)\n    c = request.args(2)\n    import time;\n    import datetime;\n    \n    x= datetime.datetime.strptime(b,"%Y-%m-%d_%H_%M_%S");\n            #print x;\n    y= datetime.datetime.strptime(c,"%Y-%m-%d_%H_%M_%S");\n    db.events1.insert(room_no= a, starts1=x , stops1=y,faculty= auth.user.first_name)\n    return str(" you have successfully booked" )\n\ndef history():\n    \n    form=SQLFORM.factory(Field(\'room_number\',requires = IS_IN_DB( db, \'room_data.room_no\' )))\n    if form.process().accepted:\n        rows3= db(db.events1.faculty == auth.user.first_name  ).select()\n        r1=[]\n        for row in rows3:\n            print row.starts1.date() , request.now.date()\n            if(row.room_no==form.vars.room_number):\n                \n                if(row.starts1.date() < request.now.date()):\n                    r1.append(row)\n        \n        \n        \n        \n        \n        \n    else:\n        \n        rows3= db(db.events1.faculty == auth.user.first_name ).select()\n        r1=[]\n        for row in rows3:\n            print row.starts1.date() , request.now.date()\n            if(row.starts1.date() < request.now.date()):\n                r1.append(row)\n    \n    \n    \n    return dict(history=r1,form=form)\n\ndef upcomingevents():\n    rows3= db(db.events1.faculty == auth.user.first_name ).select()\n    r1=[]\n    for row in rows3:\n        print row.starts1.date() , request.now.date()\n        if(row.starts1.date() >= request.now.date()):\n            r1.append(row)\n    \n    \n    \n    return dict(history=r1)\n\n@auth.requires_login()\ndef loggedin():\n    return locals();\n\n\n\n\n\ndef book():\n    name= request.args(0)\n    start=request.args(1)\n    stop=request.args(2)\n    subject= request.args(3)\n    \n    start=start.replace("_"," ",1)\n    start=start.replace("_",":")\n    stop=stop.replace("_"," ",1)\n    stop=stop.replace("_",":")\n    \n    db.events1.insert(room_no=name,starts1=start,stops1=stop,faculty= auth.user.first_name,course=subject)\n    print start,stop,subject\n    return dict(a=name,b=start,c=stop,d= auth.user.first_name,e=subject);\ndef cancel():\n    arg=request.args[0]\n    del db.events1[arg]\n    redirect(URL(\'upcomingevents\'  ))\n    return\n\n\n@auth.requires_membership(\'admin\')\ndef admin():\n       return locals()\n\nresponse._vars=response._caller(Book)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/theprototype/Study_Material/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/theprototype/Study_Material/web2py/applications/roomBooking/controllers/default.py", line 342, in <module>\n  File "/home/theprototype/Study_Material/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/theprototype/Study_Material/web2py/applications/roomBooking/controllers/default.py", line 54, in Book\n    db(db.dict.update_or_insert(dictKey = date,dictValue = ls))\n  File "/home/theprototype/Study_Material/web2py/gluon/packages/dal/pydal/objects.py", line 780, in update_or_insert\n    record = self(**values)\n  File "/home/theprototype/Study_Material/web2py/gluon/packages/dal/pydal/objects.py", line 546, in __call__\n    orderby_on_limitby=False).first()\n  File "/home/theprototype/Study_Material/web2py/gluon/packages/dal/pydal/objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "/home/theprototype/Study_Material/web2py/gluon/packages/dal/pydal/adapters/sqlite.py", line 123, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/theprototype/Study_Material/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1283, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/theprototype/Study_Material/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1170, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/home/theprototype/Study_Material/web2py/gluon/packages/dal/pydal/adapters/base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "/home/theprototype/Study_Material/web2py/gluon/packages/dal/pydal/adapters/base.py", line 767, in AND\n    return \'(%s AND %s)\' % (self.expand(first), self.expand(second))\n  File "/home/theprototype/Study_Material/web2py/gluon/packages/dal/pydal/adapters/base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "/home/theprototype/Study_Material/web2py/gluon/packages/dal/pydal/adapters/base.py", line 846, in EQ\n    self.expand(second, first.type))\n  File "/home/theprototype/Study_Material/web2py/gluon/packages/dal/pydal/adapters/base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "/home/theprototype/Study_Material/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1418, in represent\n    obj = list(map(int,[o for o in obj if o != \'\']))\nTypeError: int() argument must be a string or a number, not \'dict\'\n'
p11
s.